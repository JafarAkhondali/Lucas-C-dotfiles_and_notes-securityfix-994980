BASH_CONF_FILES=".bash_dirs .bash_profile .bashrc* .gitconfig .inputrc .screenrc .vimrc* .zshrc"
BASH_CONF_TMP_DIR="/tmp/$USER"
SSH_LOG_DIR=~/ssh_logs
VISITED_HOSTS_LOG_FILE=~/.visited

# Will create a remote $HOME dir if needed 
# If it fails, config files will still be kept int remote $BASH_CONF_TMP_DIR
# Should be run in $HOME. DO NOT use sshl in that cmd.
exportBashConf () {      # export $BASH_CONF_FILES to a remote host $1, and .bash_history the 1st time
    exportBashConfCleanup () { rm -rf $tmpDir ; }
    trap 'e=$? ; trap - RETURN EXIT INT TERM HUP QUIT ; exportBashConfCleanup ; $(exit $e)' RETURN EXIT INT TERM HUP QUIT

    local tmpDir=$(mktemp -d /tmp/BashConf_$USER.XXXXXX)
    cp $BASH_CONF_FILES $tmpDir
    [ -e .bash_history ] && cp .bash_history $tmpDir

    local install_bash_cmd="
[ -e ~/.bash_history ] && rm $tmpDir/.bash_history ;
[ -e $BASH_CONF_TMP_DIR ] || mkdir $BASH_CONF_TMP_DIR ;
find $tmpDir -mindepth 1 -maxdepth 1 -exec chmod -w {} + -exec mv -f -t $BASH_CONF_TMP_DIR -- {} + ;
rmdir $tmpDir ;
( [ -e \$HOME ] || ( sudo mkdir \$HOME && sudo chown $USER \$HOME ) ) || exit 1 ;
find $BASH_CONF_TMP_DIR -mindepth 1 -maxdepth 1 -exec mv -f -t \$HOME -- {} + ;
rmdir $BASH_CONF_TMP_DIR
"

    for dst in $@; do
        dst=$(fqdn $dst)
        scp -rC $tmpDir $dst:/tmp || return 1
        # WARNING: ssh does NOT behave the same when cmd is piped as stdin
        ssh -t $dst "$install_bash_cmd" || return 1
    done
}

ssh_setup () {
    local agentConfFile=~/.ssh/.ssh-agent.sh
    if ps -e | grep -q 'ssh-agent$'; then
        [ -r $agentConfFile ] && source $agentConfFile >/dev/null
        return
    fi
    ssh-agent >$agentConfFile
    source $agentConfFile >/dev/null
    for pub_file_key in ~/.ssh/*.pub; do
        local priv_file_key=${pub_file_key%.pub}
        [ -r $priv_file_key ] && ssh-add $priv_file_key
    done
}

unset ssh; unalias ssh 2>/dev/null
ssh () {
    ssh_setup
    $(which ssh) $@
}

unset scp; unalias scp 2>/dev/null
scp () {
    ssh_setup
    $(which scp) $@
}

visit () {              # ssh to a host after calling 'exportBashConf'. List visited hosts in ~/.visited
    local dst=$(fqdn $1) ; [ -z $dst ] && echo "MISSING ARG: Specifiy a remote host" && return 1
    cd
    if exportBashConf $dst; then
        grep -q $dst $VISITED_HOSTS_LOG_FILE || echo $dst >> $VISITED_HOSTS_LOG_FILE
        ssh $dst
    else
        echo "$(tput setaf 1)exportBashConf FAILED: $(tput sgr0) sudo rights probably missing on $dst, fallback to a /tmp \$HOME"
        ssh -t $dst "HOME=$BASH_CONF_TMP_DIR ; cd ; bash --rcfile .bashrc"
    fi
    cd $OLDPWD
}

rmRemoteHome () {       # remove remote /home/$USER
    local dst=$1 ; [ -z $dst ] && echo "MISSING ARG: Specifiy a remote host" && return 1
    # Backup .*history files
        local logdir=$SSH_LOG_DIR/$1 ; [ -x $logdir ] || mkdir -p $logdir
        scp $dst:~/.*history $logdir
        for f in $logdir/.*history; do mv $f $logdir/$(date +%Y-%m-%d-%Hh_%Mm_%Ss)$(basename $f) ; done
    ssh -t $dst "rm -rf /home/$USER/* && sudo rmdir /home/$USER" || return 1
    [ -w $VISITED_HOSTS_LOG_FILE ] && sed -i -e /$1/d $VISITED_HOSTS_LOG_FILE
}

sshl () { # Ssh with console logs, useful but not good for security
    local params="$*"
    while [ "${1:0:1}" = "-" ]; do
        [[ ${1:${#1}-1} =~ "[bcDeFiLlmOopRSw]" ]] && shift
        shift
    done
    local logdir=$SSH_LOG_DIR/$1 ; [ -x $logdir ] || mkdir -p $logdir
    local logfile=$logdir/$(date +"%Y-%m-%d-%Hh_%Mm_%Ss").log
    script -c "ssh $params" $logfile
    gzip $logfile &
}
