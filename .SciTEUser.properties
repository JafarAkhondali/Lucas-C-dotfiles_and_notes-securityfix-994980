# -*- coding: utf-8 -*-
# Author: Lucas Cimon (github.com/Lucas-C/linux_configuration)

#######
# Général
#######
repertoireConf=.scite
#~ repertoireCour=`pwd`

# encodage UTF-8 (ou en-tête)
code.page=65001
# Monospace
font.base=$(font.monospace)
font.small=$(font.monospace)
font.comment=$(font.monospace)
font.text=$(font.monospace)
font.text.comment=$(font.monospace)
font.embedded.base=$(font.monospace)
font.embedded.comment=$(font.monospace)
font.vbs=$(font.monospace)

# Restauration auto
save.session=1

# MAJ auto des fichiers
load.on.activate=1

# Full screen
position.width=-1

toolbar.visible=1

# Affichage par défaut de tous les fichiers onglet "Ouvrir"
source.files=*

# ouverture dans une seule instance de scite
check.if.already.open=1

# nombre de fichiers max en onglet
buffers=20

# Active l'affichage complet avec retour à la ligne en cas de réduction de la fenêtre
wrap=1

# Ligne finale
ensure.final.line.end=1

# Tabulations
tabsize=4
indent.size=4
# Indentation auto
indent.automatic=1
indent.opening=0
indent.closing=0

# Réduction des blocs
fold=1
fold.compact=0
fold.flags=16
# Icone pour la réduction, choix : 0, 1, 2, 3
fold.symbols=3
fold.comment=1

# Affichage des lignes
line.margin.visible=1
line.margin.width=4

# Utilise l'autocomplétion des mots
autocompleteword.automatic=1
# Fini l'autocomplétion si appui sur "(", et du coup propose le prototype s'il est disponible.
autocomplete.*.fillups=(

# Racourcis (nécessitent GTK et parfois API)
menukey.edit.match_brace=no
menukey.edit.select_to_brace=no
menukey.edit.complete_symbol=<control>E
# nécessaire pour éviter que la barre espace ne soit plus reconnue (résolu par modif clavier pour code::blocks ?)
menukey.edit.show_calltip=<control><shift>Return

menukey.view.toggle_all_folds=<control><shift>W


#NOTE: décommenter "import r" dans /usr/share/scite/SciTEGlobal.properties
# -> seuls fichiers *.rsource reconnus !?


#######
# Bash
#######
file.patterns.bash=*.sh;*.bsh;configure;.bashrc
comment.block.bash=#
comment.block.at.line.start.bash=1
comment.block.props=#
comment.block.at.line.start.props=1

comment.block.batch=::
comment.block.at.line.start.batch=1


#######
# Makefile
#######
command.go.$(file.patterns.make)=make
command.build.$(file.patterns.make)=make clean; make
comment.block.at.line.start.makefile=1
comment.block.makefile=#

file.patterns.make=makefile;Makefile;*.mak;configure;CMakeLists.txt;CMakeCache.txt


#######
# Java
#######
command.build.*.java=javac "$(FileNameExt)"
command.compile.*.java=make "$(FileNameExt)"


#######
# C & C++ & Assembleur & Swig
#######
comment.block.at.line.start.cpp=1
abbreviations.cpp=$(repertoireConf)/c_abbrev.properties
api.cpp=$(repertoireConf)/c.api
COMPILATION="$(FileNameExt)" -o "$(FileName)" -Wall -Wextra -pedantic -m32
DEBUG=-g & screen -d -m xterm -fn 8x13 -e gdb $(FileName)
#~ DEBUG=-O1
command.build.*.h;*.c;*.cpp=make

comment.block.cpp=//
comment.box.start.cpp=/**
comment.box.middle.cpp= *
comment.box.end.cpp= */

#Swig extension
file.patterns.cpp=*.c;*.cc;*.cpp;*.cxx;*.h;*.hh;*.hpp;*.hxx;*.ipp;*.sma;*.i;*.hi;*.tpp


#######
# Assembleur
#######
# On affilie l'assembleur au C en utilisant le "patterns" n'ayant qu'un élément :
file.patterns.cs=*.cs;*.s;*.S
#~ FONCTIONNE PAS ?! : keywords2.$(file.patterns.cpp)=$(repertoireConf)/keyword.s
COMPILATEUR_ASM=gcc
command.go.needs.*.s;*.S=$(COMPILATEUR_ASM) $(COMPILATION)
command.compile.*.s;*.S=$(COMPILATEUR_ASM) $(COMPILATION) $(DEBUG)
command.build.*.s;*.S=$(COMPILATEUR_ASM) $(COMPILATION)
command.go.*.s;*.S=./"$(FileName)"


#######
# C++
#######
COMPILATEUR_CPP=g++
command.go.needs.*.cpp=
command.compile.*.cpp=$(COMPILATEUR_CPP) $(COMPILATION) $(DEBUG)


#######
# C
#######
COMPILATEUR_C=gcc -std=c99
command.go.needs.*.c=
command.compile.*.c=$(COMPILATEUR_C) $(COMPILATION) $(DEBUG)


#######
# HTML
######
command.go.$(file.patterns.html)=screen -d -m firefox "$(FilePath)"
# Semble cool
#~ xml.auto.close.tags=1

#######
# XML
######
file.patterns.xml=*.xml;*.xsl;*.svg;*.xul;*.xsd;*.dtd;*.xslt;*.axl;*.xrc;*.rdf;*.scn
comment.stream.start.xml=<!--
comment.stream.end.xml=-->
comment.box.start.xml=<!--
comment.box.middle.xml=--  
comment.box.end.xml=-->
comment.block.at.line.start.xml=1


#######
# Latex
#######
command.build.$(file.patterns.tex)=pdflatex "$(FileNameExt)" | tail -n 34
command.go.$(file.patterns.tex)=screen -d -m evince "$(FileName).pdf"


#######
# TCL
#######
comment.block.at.line.start.tcl=1


#######
# LUA
#######
api.$(file.patterns.lua)=$(repertoireConf)/lualib5_annot.api
calltip.lua.word.characters=.:$(word.chars.lua)
calltip.lua.end.definition=)
comment.stream.start.lua=--[[
comment.stream.end.lua=]]
comment.box.start.lua=--[[
comment.box.middle.lua=--  
comment.box.end.lua=]]
comment.block.lua=--


#######
# ADA
#######
comment.block.at.line.start.ada=1
comment.block.ada=--

abbreviations.ada=$(repertoireConf)/ada_abbrev.properties
api.ada=$(repertoireConf)/ada.api

command.build.$(file.patterns.ada)=gnatmake "$(FileNameExt)"
command.compile.*.adb=gnatmake -f -g -gnato -fstack-check "$(FileNameExt)" & screen -d -m xterm -fn 8x13 -e gdb "$(FileName)"
command.go.*.adb=./"$(FileName)"


#######
# DECA
#######
file.patterns.java=*.java;*.jad;*.pde;*.deca


# Notes :    correspondance keywords{X}.{lexer} && style.{lexer}.{Y} indiquée nulle part et dépendante du lexer !!
#        impossible d'ajouter des "comment.stream" dans un lexer qui n'en possède pas
#        modifier le comment.block.{lexer} ne modifie pas l'application du style.{lexer} des commentaires !!


# raccourcis CTRL+i
#~ command.i.$(file.patterns.EXTENSION)=

#~ api.*.js=$(SciteDefaultHome)/api/js.api
#~ api.*.html=$(SciteDefaultHome)/api/html.api
#~ api.*.htm=$(SciteDefaultHome)/api/html.api
