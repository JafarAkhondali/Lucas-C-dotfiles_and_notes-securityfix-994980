# Author: Lucas Cimon (github.com/Lucas-C/linux_configuration)
# FROM: http://dlo.me/archives/2014/09/08/pythonrc/
# USAGE: export PYTHONSTARTUP="$HOME/.pythonrc"
# vim: set ft=python :

from __future__ import unicode_literals, print_function, absolute_import

try:
    import readline
except ImportError:
    print('Module readline not available.')
else:
    import rlcompleter
    if 'libedit' in readline.__doc__:
        readline.parse_and_bind('bind ^I rl_complete')
    else:
        readline.parse_and_bind('tab: complete')

# Automatically importing useful standard libs
import json, os, re, sys
from pprint import pprint

# quick aliases
p = print
pp = pprint

# so you can just use 'quit' to exit - FROM: https://www.reddit.com/r/Python/comments/4ivd2k/what_is_your_favorite_python_error_message/
class Quit(object):
    def __repr__(self):
        exit()
quit = Quit()
q = quit

try:
    from django import test
    from django.db import connection
    from django.core.management import call_command

    # Providing a handy 'load_fixture' function in the Django shell,
    # and registering a cleanup function executed when exiting the shell
    # FROM: http://testedwebdev.blogspot.ru/2012/05/django-shell-testing.html
    DJANGO_TEST_DB = None
    def load_fixture(filename):
        global DJANGO_TEST_DB
        if DJANGO_TEST_DB:
            print('A Django test DB already exists, please first call django_testdb_teardown()')
            return
        import atexit
        atexit.register(django_testdb_teardown)
        test.utils.setup_test_environment()
        DJANGO_TEST_DB = connection.creation.create_test_db()
        call_command('loaddata', filename)
    def django_testdb_teardown():
        global DJANGO_TEST_DB
        if not DJANGO_TEST_DB:
            return
        connection.creation.destroy_test_db(DJANGO_TEST_DB)
        test.utils.teardown_test_environment()

    # We are in django shell, hence we store the command history in a dedicated file
    # (this has to be done manually, as by defaukt nothing is read/stored in any file)
    # FROM: http://jpadilla.com/post/59673924412/python-shell-history
    DJANGO_HISTORY_FILE = os.path.join(os.environ['HOME'], '.django_history')
    if os.path.exists(DJANGO_HISTORY_FILE):
        readline.read_history_file(DJANGO_HISTORY_FILE)
        import atexit
        atexit.register(readline.write_history_file, DJANGO_HISTORY_FILE)
except ImportError:
    pass

if sys.version_info >= (3, 0) and hasattr(sys, 'real_prefix'): # in a VirtualEnv, we need to manual read/write the history, cf. https://github.com/berdario/pew/issues/90
    PYTHON_HISTORY_FILE = os.path.join(os.environ['HOME'], '.python_history')
    if os.path.exists(PYTHON_HISTORY_FILE):
        readline.read_history_file(PYTHON_HISTORY_FILE)
        import atexit
        atexit.register(readline.write_history_file, PYTHON_HISTORY_FILE)

print('.pythonrc successfully LOADED')
